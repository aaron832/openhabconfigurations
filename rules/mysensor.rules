import org.openhab.core.library.types.*
import org.openhab.core.persistence.*
import org.openhab.model.script.actions.*
import java.util.*
import org.eclipse.xtext.xbase.lib.*
import org.openhab.core.items.*

var String ArduinoUpdate = ""
var String sketchName = ""
var int V_G_TEMP = 0
var int V_G_HUM = 1
 var int V_LIGHT = 2
 var int V_DIMMER = 3
var int V_PRESSURE = 4
var int V_FORECAST = 5
var int V_RAIN = 6
var int V_RAINRATE = 7
var int V_WIND = 8
var int V_GUST = 9
var int V_DIRECTION = 10
var int V_UV = 11
var int V_WEIGHT = 12
var int V_DISTANCE = 13
var int V_IMPEDANCE = 14
var int V_ARMED = 15
var int V_TRIPPED = 16
var int V_WATT = 17
var int V_KWH = 18
var int V_SCENE_ON = 19
var int V_SCENE_OFF = 20
var int V_HEATER = 21
var int V_HEATER_SW = 22
var int V_LIGHT_LEVEL = 23
var int V_VAR1 = 24
var int V_VAR2 = 25
var int V_VAR3 = 26
var int V_VAR4 = 27
var int V_VAR5 = 28
var int V_UP = 29
var int V_DOWN = 30
var int V_STOP = 31
var int V_IR_SEND = 32
var int V_IR_RECEIVE = 33
var int V_FLOW = 34
var int V_VOLUME = 35
var int V_LOCK_STATUS = 36
var int V_DUST_LEVEL = 37
var int V_VOLTAGE = 38
var int V_CURRENT = 39
var int msgPresentation = 0
var int msgSet = 1
var int msgReq = 2
var int msgInternal = 3
var int msgStream = 4
var int alarmArmor = 1
// Internal Commands

var int I_BATTERY_LEVEL = 0
var int I_TIME = 1
var int I_VERSION = 2
var int I_ID_REQUEST = 3
var int I_ID_RESPONSE = 4
var int I_INCLUSION_MODE = 5
var int I_CONFIG = 6
var int I_FIND_PARENT = 7
var int I_FIND_PARENT_RESPONSE = 8
var int I_LOG_MESSAGE = 9
var int I_CHILDREN = 10
var int I_SKETCH_NAME = 11
var int I_SKETCH_VERSION = 12
var int I_REBOOT = 13
var int I_GATEWAY_READY = 14
// Mappings
var HashMap<String, String> sensorToItemsMap = newLinkedHashMap(
  "105;1;" -> "tempGarage01", 
  "tempGarage01" -> "105;1;",
  "105;0;" -> "humGarage01", 
  "humGarage01" -> "105;0;",
  "105;2;" -> "bayDoorGarage01", 
  "bayDoorGarage01" -> "105;2;",
  "105;3;" -> "doorGarage01", 
  "doorGarage01" -> "105;3;",
  "20;0;" -> "lightSalonCeiling00", 
  "lightSalonCeiling00" -> "20;0;",
  "20;1;" -> "lightSalonCeiling01", 
  "lightSalonCeiling01" -> "20;1;",
  "20;2;" -> "lightSalonCeiling02", 
  "lightSalonCeiling02" -> "20;2;",
  "20;3;" -> "lightSalonCeiling03", 
  "lightSalonCeiling03" -> "20;3;",
  "20;4;" -> "lightSalonCeiling04", 
  "lightSalonCeiling04" -> "20;4;",
  "10;4;" -> "lightBar04", 
  "lightBar04" -> "10;4;",
  "10;0;" -> "lightKitchenCabinet00", 
  "lightKitchenCabinet00" -> "10;0;",
  "10;1;" -> "lightKitchenCabinet01", 
  "lightKitchenCabinet01" -> "10;1;",
  "10;2;" -> "lightKitchenCabinet02", 
  "lightKitchenCabinet02" -> "10;2;",
  "10;3;" -> "lightKitchenCabinet03", 
  "lightKitchenCabinet03" -> "10;3;",
  "20;255;" -> "sensorLRCDimmer", 
  "21;255;" -> "sensorLRHumTemp", 
  "22;255;" -> "sensorLRStripPlug01", 
  "10;255;" -> "sensorKCLight"

)
// dimmer function
val org.eclipse.xtext.xbase.lib.Functions$Function5 dimmerOperation = [
  org.openhab.core.library.items.DimmerItem relayItem, 
  org.openhab.core.library.items.StringItem arduinoItem, 
  String arduinoDevMap,
  String receivedCommand,
  Integer subType|
  var Number percent = 0
  if(relayItem.state instanceof DecimalType) percent = relayItem.state as DecimalType
  if(receivedCommand==INCREASE) percent = percent + 5
  if(receivedCommand==DECREASE) percent = percent - 5
  if(receivedCommand==ON) percent = 100       
  if(receivedCommand==OFF) percent = 0        
  if(percent<0)   percent = 0
  if(percent>100) percent = 100
  
  println ("Function: dimmerOperation >> "+arduinoDevMap + "1;1;" + subType + ";" + percent )
  arduinoItem.sendCommand(arduinoDevMap + "1;0;" + subType + ";" + percent + "\n")
]
//switch function
val org.eclipse.xtext.xbase.lib.Functions$Function4 switchOperation = [
  org.openhab.core.library.items.SwitchItem relayItem, 
  org.openhab.core.library.items.StringItem arduinoItem, 
  String arduinoDevMap,
  Integer subType|
  var Integer state = 0
        if (relayItem.state == OFF) {
      state = 0 
  }
  else {
      state = 1
  }
  println ("Function: switchOperation >> "+arduinoDevMap + "1;1;" + subType + ";" + state )
  arduinoItem.sendCommand(arduinoDevMap + "1;0;" + subType + ";" + state + "\n")
]

//receiving msg from mysensors gateway
rule "Arduino sends to Openhab"
  when
      Item Arduino received update
  then
      var String lineBuffer =  Arduino.state.toString.split("\n")
      for (String line : lineBuffer) {
          var String[] message = line.split(";")
          var Integer nodeId = new Integer(message.get(0))
          var Integer childId = new Integer(message.get(1))
          var Integer msgType = new Integer(message.get(2))
          var Integer ack = new Integer(message.get(3))
          var Integer subType = new Integer(message.get(4))
          var String msg = message.get(5)
          if(msgType == 1 ){
              if (subType == V_G_TEMP){
                  postUpdate(sensorToItemsMap.get( nodeId + ";" + childId + ";"), msg)
                  println ("Temp item: " + sensorToItemsMap.get( nodeId + ";" + childId + ";") + " temp: " + msg )
                  }
              if (subType == V_G_HUM){
                  postUpdate(sensorToItemsMap.get( nodeId + ";" + childId + ";"), msg)
                  println ("HUM item: " + sensorToItemsMap.get( nodeId + ";" + childId + ";") + " hum: " + msg )
                  }
			  if (subType == V_TRIPPED){
                  var String state
                  var Integer statusInt = new Integer(message.get(5))
                  if(statusInt == 1) { 
                      state = "1"
                      } 
                  else { 
                      state = "0" 
                      }
                  postUpdate(sensorToItemsMap.get( nodeId + ";" + childId + ";"), state)
                  println ("V_TRIPPED Item: " + sensorToItemsMap.get( nodeId + ";" + childId + ";") + " V_TRIPPED: " + state )
                  }
              }
              if (subType == V_DIMMER){
                  postUpdate(sensorToItemsMap.get( nodeId + ";" + childId + ";"), msg)
                  println ("Dimmer item: " + sensorToItemsMap.get( nodeId + ";" + childId + ";") + " Dimmer: " + msg )
                      }
              if (subType == V_LIGHT){
                  var String state
                  var Integer statusInt = new Integer(message.get(5))
                  if(statusInt == 1) { 
                      state = "ON"
                      } 
                  else { 
                      state = "OFF" 
                      }
                  postUpdate(sensorToItemsMap.get( nodeId + ";" + childId + ";"), state)
                  println ("Light Item: " + sensorToItemsMap.get( nodeId + ";" + childId + ";") + " Light: " + state )
                  }
              }
          // Internal Command
          if(msgType == 3){
              if(subType == I_SKETCH_NAME){
                      println("Sketch name: " + msg )
                      sketchName=msg
                  }
              if(subType == I_SKETCH_VERSION){
                      println("Sketch version: " + msg )
                      postUpdate(sensorToItemsMap.get( nodeId + ";" + childId + ";"), sketchName+" " +msg )
                      sketchName=""
                  }
              }
          }   
      }
end



rule "lightBar04 Switch Rule"
  when
      Item lightBar04 changed
  then
      switchOperation.apply(lightBar04, Arduino, sensorToItemsMap.get("lightBar04"), V_LIGHT)         
end   

rule "lightKitchenCabinet00 Switch Rule"
  when
      Item lightKitchenCabinet00 changed
  then
      switchOperation.apply(lightKitchenCabinet00, Arduino, sensorToItemsMap.get("lightKitchenCabinet00"), V_LIGHT)           
end   

rule "lightKitchenCabinet01 Switch Rule"
  when
      Item lightKitchenCabinet01 changed
  then
      switchOperation.apply(lightKitchenCabinet01, Arduino, sensorToItemsMap.get("lightKitchenCabinet01"), V_LIGHT)           
end   

rule "lightKitchenCabinet02 Switch Rule"
  when
      Item lightKitchenCabinet02 changed
  then
      switchOperation.apply(lightKitchenCabinet02, Arduino, sensorToItemsMap.get("lightKitchenCabinet02"), V_LIGHT)           
end   

rule "lightKitchenCabinet03 Switch Rule"
  when
      Item lightKitchenCabinet03 changed
  then
      switchOperation.apply(lightKitchenCabinet03, Arduino, sensorToItemsMap.get("lightKitchenCabinet03"), V_LIGHT)           
end   

rule "lightSalonCeiling00 Switch Rule"
  when
      Item lightSalonCeiling00 received command
  then
      if(lightSalonCeiling00.state instanceof DecimalType || receivedCommand==INCREASE || receivedCommand==DECREASE){
      dimmerOperation.apply(lightSalonCeiling00, Arduino, sensorToItemsMap.get("lightSalonCeiling00"), receivedCommand, V_DIMMER)         
      } 
  end 
rule "lightSalonCeiling01 Switch Rule"
  when
      Item lightSalonCeiling01 received command
  then
      if(lightSalonCeiling01.state instanceof DecimalType || receivedCommand==INCREASE || receivedCommand==DECREASE){
      dimmerOperation.apply(lightSalonCeiling01, Arduino, sensorToItemsMap.get("lightSalonCeiling01"), receivedCommand, V_DIMMER)         
      } 
  end 
rule "lightSalonCeiling02 Switch Rule"
  when
      Item lightSalonCeiling02 received command
  then
      if(lightSalonCeiling02.state instanceof DecimalType || receivedCommand==INCREASE || receivedCommand==DECREASE){
      dimmerOperation.apply(lightSalonCeiling02, Arduino, sensorToItemsMap.get("lightSalonCeiling02"), receivedCommand, V_DIMMER)         
      } 
  end 
rule "lightSalonCeiling03 Switch Rule"
  when
      Item lightSalonCeiling03 received command
  then
      if(lightSalonCeiling03.state instanceof DecimalType || receivedCommand==INCREASE || receivedCommand==DECREASE){
      dimmerOperation.apply(lightSalonCeiling03, Arduino, sensorToItemsMap.get("lightSalonCeiling03"), receivedCommand, V_DIMMER)         
      } 
  end 
rule "lightSalonCeiling04 Switch Rule"
  when
      Item lightSalonCeiling04 received command
  then
      if(lightSalonCeiling04.state instanceof DecimalType || receivedCommand==INCREASE || receivedCommand==DECREASE){
      dimmerOperation.apply(lightSalonCeiling04, Arduino, sensorToItemsMap.get("lightSalonCeiling04"), receivedCommand, V_DIMMER)         
      } 
  end 

rule "plugStrip01s12 Switch Rule"
  when
      Item plugStrip01s12 changed
  then
      switchOperation.apply(plugStrip01s12, Arduino, sensorToItemsMap.get("plugStrip01s12"), V_LIGHT)         
end   


rule "plugStrip01s34 Switch Rule"
  when
      Item plugStrip01s34 changed
  then
      switchOperation.apply(plugStrip01s34, Arduino, sensorToItemsMap.get("plugStrip01s34"), V_LIGHT)         
end   